// GLSL STARTER CODE BY DANIEL S. BUCKSTEIN

//------------------------------------------------------------
// TYPE ALIASES & UTILITY FUNCTIONS

// sScalar: alias for a 1D scalar (non-vector)
#define sScalar float

// sCoord: alias for a 2D coordinate
#define sCoord vec2

// sDCoord: alias for a 2D displacement or measurement
#define sDCoord vec2

// sBasis: alias for a 3D basis vector
#define sBasis vec3

// sPoint: alias for a point/coordinate/location in space
#define sPoint vec4

// sVector: alias for a vector/displacement/change in space
#define sVector vec4


// color3: alias for a 3D vector representing RGB color
// 	(this is non-spatial so neither a point nor vector)
#define color3 vec3

// color4: alias for RGBA color, which is non-spatial
// 	(this is non-spatial so neither a point nor vector)
#define color4 vec4


// asPoint: promote a 3D vector into a 4D vector 
//	representing a point in space (w=1)
//    v: input 3D vector to be converted
sPoint asPoint(in sBasis v)
{
    return sPoint(v, 1.0);
}

// asVector: promote a 3D vector into a 4D vector 
//	representing a vector through space (w=0)
//    v: input 3D vector to be converted
sVector asVector(in sBasis v)
{
    return sVector(v, 0.0);
}


// lengthSq: calculate the squared length of a vector type
sScalar lengthSq(sDCoord x)
{
    return dot(x, x);
}
sScalar lengthSq(sBasis x)
{
    return dot(x, x);
}
sScalar lengthSq(sVector x)
{
    return dot(x, x);
}


//------------------------------------------------------------
// VIEWPORT INFO

// sViewport: info about viewport
//    viewportPoint: location on the viewing plane 
//							x = horizontal position
//							y = vertical position
//							z = plane depth (negative focal length)
//	  pixelCoord:    position of pixel in image
//							x = [0, width)	-> [left, right)
//							y = [0, height)	-> [bottom, top)
//	  resolution:    resolution of viewport
//							x = image width in pixels
//							y = image height in pixels
//    resolutionInv: resolution reciprocal
//							x = reciprocal of image width
//							y = reciprocal of image height
//	  size:       	 in-scene dimensions of viewport
//							x = viewport width in scene units
//							y = viewport height in scene units
//	  ndc: 			 normalized device coordinate
//							x = [-1, +1) -> [left, right)
//							y = [-1, +1) -> [bottom, top)
// 	  uv: 			 screen-space (UV) coordinate
//							x = [0, 1) -> [left, right)
//							y = [0, 1) -> [bottom, top)
//	  aspectRatio:   aspect ratio of viewport
//	  focalLength:   distance to viewing plane
struct sViewport
{
    sPoint viewportPoint;
	sCoord pixelCoord;
	sDCoord resolution;
	sDCoord resolutionInv;
	sDCoord size;
	sCoord ndc;
	sCoord uv;
	sScalar aspectRatio;
	sScalar focalLength;
};

// initViewport: calculate the viewing plane (viewport) coordinate
//    vp: 		      output viewport info structure
//    viewportHeight: input height of viewing plane
//    focalLength:    input distance between viewer and viewing plane
//    fragCoord:      input coordinate of current fragment (in pixels)
//    resolution:     input resolution of screen (in pixels)
void initViewport(out sViewport vp,
                  in sScalar viewportHeight, in sScalar focalLength,
                  in sCoord fragCoord, in sDCoord resolution)
{
    vp.pixelCoord = fragCoord;
    vp.resolution = resolution;
    vp.resolutionInv = 1.0 / vp.resolution;
    vp.aspectRatio = vp.resolution.x * vp.resolutionInv.y;
    vp.focalLength = focalLength;
    vp.uv = vp.pixelCoord * vp.resolutionInv;
    vp.ndc = vp.uv * 2.0 - 1.0;
    vp.size = sDCoord(vp.aspectRatio, 1.0) * viewportHeight;
    vp.viewportPoint = asPoint(sBasis(vp.ndc * vp.size * 0.5, -vp.focalLength));
}


//------------------------------------------------------------
// RAY INFO

// sRay: ray data structure
//	  origin: origin point in scene
//    direction: direction vector in scene
struct sRay
{
    sPoint origin;
    sVector direction;
};

// initRayPersp: initialize perspective ray
//    ray: 		   output ray
//    eyePosition: position of viewer in scene
//    viewport:    input viewing plane offset
void initRayPersp(out sRay ray,
             	  in sBasis eyePosition, in sBasis viewport)
{
    // ray origin relative to viewer is the origin
    // w = 1 because it represents a point; can ignore when using
    ray.origin = asPoint(eyePosition);

    // ray direction relative to origin is based on viewing plane coordinate
    // w = 0 because it represents a direction; can ignore when using
    ray.direction = asVector(viewport - eyePosition);
}

// initRayOrtho: initialize orthographic ray
//    ray: 		   output ray
//    eyePosition: position of viewer in scene
//    viewport:    input viewing plane offset
void initRayOrtho(out sRay ray,
             	  in sBasis eyePosition, in sBasis viewport)
{
    // offset eye position to point on plane at the same depth
    initRayPersp(ray, eyePosition + sBasis(viewport.xy, 0.0), viewport);
}


//------------------------------------------------------------
// RENDERING FUNCTIONS

// calcColor: calculate the color of current pixel
//	  vp:  input viewport info
//	  ray: input ray info
color4 calcColor(in sViewport vp, in sRay ray)
{
    // test inputs
    //return color4(ray.direction.xyz == vp.viewportPoint.xyz); // pass
    //return color4(lengthSq(vp.viewportPoint.xy) >= 0.25); // pass
    //return color4(vp.uv, 0.0, 0.0);
    //return color4(vp.ndc, 0.0, 0.0);
    //return vp.viewportPoint;
    //const color 
    //return vec4(1.0,0.0,0.0,1.0);
    // texture (full-screen)
    //sampler2D tex = iChannel0;
    sCoord px = vp.pixelCoord;
    sDCoord res = iChannelResolution[0].xy;
    sScalar ratio = res.y * vp.resolutionInv.y;
    sCoord loc = px / res; //relative to texture(input)
    loc = ratio * loc + vec2(res.x * 0.25 + 0.0);// zoom + shift
    //return vec4 mixedImage = mix(iChannel0,iChannel1,loc);
    return texture(iChannel0,loc);// Full RGBA
    return texture(iChannel0,loc).bbbb;
   
}
color4 warpedImage ( out vec4 fragColor, in vec2 fragCoord)
{
    vec2 uv = fragCoord.xy / iResolution.xy;
    
    uv.x += cos(uv.y*5.2+iTime*1.4)/100.00;
    uv.y += cos(uv.x*5.1+iTime*1.4)/100.00;
    vec4 color = texture(iChannel0, uv);
    
    fragColor = color;
    return color;
}

color4 blendedImage( out vec4 fragColor, in vec2 fragCoord)
{
    // Normalized pixel coordinates (from 0 to 1)
 	vec2 uv = fragCoord/iResolution.xy;
    vec4 temp = texture(iChannel0, uv);
    float average = ((temp.r + temp.g + temp.b) / 3.0);
    temp.rgb = vec3(average);
    fragColor = temp;
    vec4 temp2 = texture(iChannel1,uv);    
    if(uv.x > 0.5)
        fragColor = temp;
    else
        fragColor = temp2;
    return fragColor;
}

color4 blendtest( out vec4 fragColor, in vec2 fragCoord)
{
    //{
    // Normalized pixel coordinates (from 0 to 1)
    vec2 uv = fragCoord/iResolution.xy;
    
    // get image of iChannel0
    vec4 channel0 = texture(iChannel0, uv.xy);
    
    // get image of iChannel1
    vec4 channel1 = texture(iChannel1, uv.xy); 
    // blend in 4 seconds from 0 to 1
    float  opacity = mod(iTime / 4.0, 1.0);
    // Output to screen
    fragColor = mix(channel0, channel1, opacity);
        return fragColor;
	//};
}

color4 shadeImage( out vec4 fragColor, in vec2 fragCoord)
{
    //Credit to bfazekas https://www.shadertoy.com/view/4sycRK
    
    const float lightPos = 300.0, //position of light
        radius = 0.15, //amount of lit surface area
    	brightness = 4.5; //affects how bright of a light is shined on the texture
    
    //calculating uv based on normalizing resolution's y coord
    vec2 uv = (fragCoord - iResolution.xy * 0.5) / iResolution.y; 
    //inputing texture channel and uv into texture position
    vec4 tex = texture(iChannel0, uv); 
    //calculates position of light
    vec2 pos = fragCoord - lightPos; 
    //calculates amount of lit surface area
    vec2 rad =  radius * iResolution.xy; 
    //calculates the black around the spotlight
    float darkness = dot(pos, pos)/dot(rad,rad);
    
    //inverts colors to correct values
    vec3 lightInv = vec3(1.0 / iResolution.x, 1.0 / iResolution.y, 1); //vec3(iResolution.x, iResolution.y, 1);
    //normalizes texture position
    vec4 norm = normalize(tex);
    //creates normal vector out of normalized texture position
    vec3 NormalVector = vec3(norm.x, norm.y, norm.z);
    //creates the light vector
	vec3 LightVector = normalize(vec3(lightInv.x - fragCoord.x, lightInv.y - fragCoord.y, 0));
    //calculates the diffuse coeff
    float diffuse = max( dot(NormalVector, LightVector), 0.0);
    
    
    return fragColor = tex * (0.45 - diffuse) * (brightness - darkness);
}

/*
   float rotX = (iMouse.x / iResolution.x) * 2.0 * 3.14;
   float roty = (iMouse.y / iResolution.y) * 3.14;
   vec2 uv = 2.5 * (fragCoord.xy - 0.5 * iResolution.xy) / iResolution.xx;
        

*/
//------------------------------------------------------------
// SHADERTOY MAIN

// mainImage: process the current pixel (exactly one call per pixel)
//    fragColor: output final color for current pixel
//    fragCoord: input location of current pixel in image (in pixels)
void mainImage(out color4 fragColor, in sCoord fragCoord)
{
    // viewing plane (viewport) inputs
    const sBasis eyePosition = sBasis(0.0);
    const sScalar viewportHeight = 2.0, focalLength = 1.5;
    
    // viewport info
    sViewport vp;

    // ray
    sRay ray;
    
    // render
    initViewport(vp, viewportHeight, focalLength, fragCoord, iResolution.xy);
    initRayPersp(ray, eyePosition, vp.viewportPoint.xyz);
    //fragColor += calcColor(vp, ray);
    //fragColor = warpedImage(fragColor,fragCoord);
    //fragColor = blendedImage(fragColor,fragCoord);
    //fragColor = blendtest(fragColor,fragCoord);
    fragColor = shadeImage(fragColor,fragCoord);
}
